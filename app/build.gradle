plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-parcelize'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId 'com.marvelsample.mobile'
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "MARVEL_API_KEY", getApiKey())
            buildConfigField("String", "MARVEL_PRIVATE_KEY", getPrivateApiKey())
        }

        debug {
            buildConfigField("String", "MARVEL_API_KEY", getApiKey())
            buildConfigField("String", "MARVEL_PRIVATE_KEY", getPrivateApiKey())

            applicationIdSuffix ".debug"
            debuggable true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
        useIR = true
    }
    buildFeatures {
        viewBinding true
        compose true
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.0.0-beta01'
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
        exclude("META-INF/*.kotlin_module")
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // AndroidX
    def androidXVersion = '2.2.0'
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:' + androidXVersion
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:' + androidXVersion
    implementation 'androidx.lifecycle:lifecycle-viewmodel-savedstate:' + androidXVersion
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:' + androidXVersion
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.paging:paging-runtime-ktx:3.0.0-beta01'
    implementation 'androidx.activity:activity-ktx:1.3.0-alpha02'
    implementation 'androidx.palette:palette-ktx:1.0.0'

    // Navigation
    def androidXNavigationVersion = '2.3.2'
    implementation 'androidx.navigation:navigation-fragment-ktx:' + androidXNavigationVersion
    implementation 'androidx.navigation:navigation-ui-ktx:' + androidXNavigationVersion

    // Networking (retrofit + okhttp)
    def retrofitVersion = '2.9.0'
    def okhttpVersion = '4.9.1'
    implementation 'com.squareup.retrofit2:retrofit:' + retrofitVersion
    implementation 'com.squareup.retrofit2:converter-gson:' + retrofitVersion
    implementation 'com.squareup.okhttp3:okhttp:' + okhttpVersion
    implementation 'com.squareup.okhttp3:logging-interceptor:' + okhttpVersion

    // Image render library (Coil)
    implementation 'io.coil-kt:coil:1.1.0'

    // Koin (DI library)
    def koinVersion = "2.2.0"
    implementation "org.koin:koin-android:$koinVersion"
    implementation "org.koin:koin-androidx-viewmodel:$koinVersion"

    // Compose
    def composeVersion = "1.0.0-beta01"
    def composePagingVersion = "1.0.0-alpha08"
    def accompanistVersion = "0.6.0"
    implementation "androidx.compose.ui:ui:$composeVersion"
    implementation "androidx.compose.foundation:foundation:$composeVersion"
    implementation "androidx.compose.ui:ui-tooling:$composeVersion"
    implementation "androidx.compose.material:material:$composeVersion"
    implementation "androidx.compose.runtime:runtime:$composeVersion"
    implementation "androidx.compose.runtime:runtime-livedata:$composeVersion"
    implementation "dev.chrisbanes.accompanist:accompanist-coil:$accompanistVersion"
    implementation "androidx.paging:paging-compose:$composePagingVersion"

    // Testing
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.2'
    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.navigation:navigation-testing:' + androidXNavigationVersion
    androidTestImplementation('com.schibsted.spain:barista:3.7.0') {
        exclude group: 'org.jetbrains.kotlin' // Only if you already use Kotlin in your project
    }
    debugImplementation('androidx.fragment:fragment-testing:1.3.0') {
        exclude group: 'androidx.test', module: 'monitor'
    }
    // Required for compose-based UI tests: https://stackoverflow.com/questions/66146594/upgrading-to-jetpack-compose-alpha-12-causes-errors-on-setcontent
    implementation 'androidx.activity:activity-compose:1.3.0-alpha02'
    androidTestImplementation("androidx.compose.ui:ui-test-junit4:$composeVersion")

    androidTestImplementation 'androidx.test:runner:1.3.1-alpha02'
    androidTestUtil 'androidx.test:orchestrator:1.3.1-alpha02'
}

def getApiKey() {
    def keysFile = file("keys.properties")
    def keysProperties = new Properties()
    keysProperties.load(new FileInputStream(keysFile))
    def tmdbApiKey = keysProperties['MARVEL_PUBLIC_KEY']
    return tmdbApiKey
}

def getPrivateApiKey() {
    def keysFile = file("keys.properties")
    def keysProperties = new Properties()
    keysProperties.load(new FileInputStream(keysFile))
    def tmdbApiKey = keysProperties['MARVEL_PRIVATE_KEY']
    return tmdbApiKey
}